# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
#참조
# npm 또는 yarn 사용 시: node_modules 폴더만 생성되므로 .gitignore에 /node_modules만 추가하면 충분합니다.
# pnpm 사용 시: node_modules, .pnp, .pnp.js 등이 모두 생성되므로, 이들을 모두 .gitignore에 추가해주는 것이 가장 정확한 설정입니다.

# =================================================================
# dependencies (설치된 라이브러리 관련 파일)
# =================================================================

# pnpm install 명령어로 설치된 모든 외부 라이브러리가 담기는 폴더입니다.
# package.json만 있으면 언제든 다시 설치할 수 있고, 용량이 매우 크기 때문에 반드시 무시해야 합니다.
/node_modules

# pnpm이 node_modules를 효율적으로 관리하기 위해 사용하는 파일들입니다.
# 이 역시 pnpm install 시 자동으로 생성되므로 Git에 올릴 필요가 없습니다.
/.pnp
.pnp.js

# =================================================================
# testing (테스트 관련 파일)
# =================================================================

# 코드 테스트 커버리지(성적표) 리포트가 생성되는 폴더입니다.
# 테스트를 실행할 때마다 새로 만들어지므로 무시합니다.
/coverage

# =================================================================
# production (서버 배포용 최종 결과물)
# =================================================================

# pnpm build 명령어로 생성되는, 실제 서버에 올리기 위한 최종 결과물 폴더입니다.
# 소스 코드를 압축하고 최적화한 결과물이므로, 원본 소스 코드만 있으면 언제든 재생성 가능합니다.
/build

# =================================================================
# misc (기타 파일)
# =================================================================

# macOS(맥) 운영체제가 자동으로 생성하는 시스템 파일입니다.
# 다른 운영체제 사용자에게는 불필요하므로 무시합니다.
.DS_Store

# API 키, 데이터베이스 비밀번호 등 민감 정보를 저장하는 환경 변수 파일들입니다.
# 보안 유출을 막기 위해 반드시, 절대로 Git에 올리면 안 됩니다.
.env.local
.env.development.local
.env.test.local
.env.production.local

# npm, yarn 사용 중 에러가 발생했을 때 생성되는 로그 파일들입니다.
# 개인 컴퓨터에서 디버깅할 때만 필요한 파일이므로 무시합니다.
npm-debug.log*
yarn-debug.log*
yarn-error.log*
